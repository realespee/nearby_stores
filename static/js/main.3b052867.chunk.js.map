{"version":3,"sources":["components/Sidebar/sidebar.js","components/Map/backup.js","components/Main/main.js","components/Navbar/navbar.js","components/App/App.js","serviceWorker.js","index.js"],"names":["Sidebar","data","cache","React","useRef","CellMeasurerCache","fixedHeight","defaultHeight","className","style","width","height","rowHeight","current","deferredMeasurementCache","rowCount","length","rowRenderer","key","index","parent","store","columnIndex","rowIndex","name","vicinity","libraries","mapContainerStyle","options","disableDefaultUI","zoomControl","scrollwheel","Backup","loc","onScriptLoad","changeLocation","useLoadScript","googleMapsApiKey","process","isLoaded","loadError","useState","center","setCenter","setStoresList","selected","setSelected","useEffect","zoom","onLoad","lat","position","onDragEnd","e","latLng","lng","onMarkerDragEnd","draggable","onPositionChanged","onClick","icon","url","origin","window","google","maps","Point","anchor","scaledSize","Size","map","d","place_id","geometry","location","onCloseClick","user_ratings_total","id","Main","forwardRef","ref","option","setLocation","opt","setOpt","stores","setStores","navigator","geolocation","getCurrentPosition","coords","latitude","longitude","alert","request","rankBy","places","RankBy","DISTANCE","types","value","PlacesService","document","getElementById","nearbySearch","results","status","PlacesServiceStatus","OK","i","push","useImperativeHandle","newLocation","Navbar","handleChange","onChange","label","href","App","selectedStore","setSelectedStore","selectedOption","load","onScriptLoad1","Boolean","hostname","match","ReactDOM","render","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.3b052867.chunk.js","sourcesContent":["import React from 'react'\r\nimport './sidebar.css'\r\n// import { FixedSizeList as List } from 'react-window';\r\nimport {\r\n    List, \r\n    AutoSizer, \r\n    CellMeasurer, \r\n    CellMeasurerCache\r\n} from 'react-virtualized'\r\n\r\nconst Sidebar = ({data}) => {\r\n\r\n\r\n    const cache = React.useRef(new CellMeasurerCache({\r\n        fixedHeight:true,\r\n        defaultHeight: 110,\r\n    }))\r\n\r\n    return(\r\n        <div className='sidebar'>\r\n            \r\n            <h3 className='item-title'><strong>Top 20 Stores Nearby</strong></h3>\r\n            <div className='wrapper' style={{width: \"100%\", height: \"100vh\"}}>\r\n            <AutoSizer>\r\n                {({width, height})=>\r\n                    (\r\n                        <List\r\n                            width={width}\r\n                            height={height}\r\n                            rowHeight={cache.current.rowHeight}\r\n                            deferredMeasurementCache={cache.current}\r\n                            rowCount={data.length}\r\n                            rowRenderer={({key, index, style, parent})=>{\r\n                                const store = data[index]\r\n\r\n                                return (\r\n                                    <CellMeasurer \r\n                                        key={key} \r\n                                        cache={cache.current} \r\n                                        parent={parent}\r\n                                        columnIndex={0}\r\n                                        rowIndex={index}\r\n                                        >\r\n                                        <div className='single-store' style={style}>\r\n                                            <p><strong>{store.name}</strong></p>\r\n                                            <p>{store.vicinity}</p>\r\n                                        </div>\r\n                                    </CellMeasurer>\r\n                                );\r\n                            }}\r\n                        /> \r\n                    )\r\n                }\r\n           \r\n            </AutoSizer>\r\n            </div>    \r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Sidebar","import React, {useState, useEffect} from \"react\";\r\nimport './backup.css'\r\nimport {\r\n  GoogleMap,\r\n  useLoadScript,\r\n  Marker,\r\n  InfoWindow\r\n} from \"@react-google-maps/api\";\r\n\r\nconst libraries = ['places']\r\nconst mapContainerStyle = {\r\n    width: '100%',\r\n    height: '100vh'\r\n}\r\nconst options = {\r\n    disableDefaultUI : true,\r\n    zoomControl: true,\r\n    scrollwheel: false // Dont scroll to zoom the map\r\n}\r\n\r\nconst Backup = ({loc, data, onScriptLoad, changeLocation}) => {\r\n    const {isLoaded, loadError} = useLoadScript({\r\n        googleMapsApiKey : process.env.REACT_APP_GOOGLE_MAPS_API_KEY,\r\n        libraries,    \r\n    })\r\n\r\n    // const [center, setCenter] = useState(()=>({lat:0, lng:0}))\r\n    const [center, setCenter] = useState(loc)\r\n    const [storesList, setStoresList] = useState(data)\r\n    const [markers, setMarkers] = useState(()=>[])\r\n    const [selected, setSelected] = useState(()=>null)\r\n\r\n    useEffect(() => {\r\n        setStoresList(data)\r\n    }, [data])\r\n\r\n    useEffect(() => {\r\n        setCenter(loc)\r\n    }, [loc])\r\n\r\n    // console.log(center)\r\n\r\n    //When USER marker is dragged\r\n    const onMarkerDragEnd = (e) => {\r\n        const lat = e.latLng.lat();\r\n        const lng = e.latLng.lng();\r\n        changeLocation({lat, lng})\r\n        onScriptLoad()  \r\n    };\r\n\r\n    //if Map doesn't load\r\n    if (loadError) return \"Error!! Check your connection\";\r\n    if (!isLoaded) return 'Loading...';\r\n\r\n    return (\r\n        <div className='map-container'>\r\n            <GoogleMap\r\n                mapContainerStyle={mapContainerStyle}\r\n                zoom={14}\r\n                center={center}\r\n                options={options}\r\n                onLoad={onScriptLoad}\r\n                // onCenterChange={onScriptLoad}\r\n            >\r\n\r\n                {\r\n                    center.lat ? \r\n                    <Marker\r\n                        position={center}\r\n                        onDragEnd={(e) => onMarkerDragEnd(e)}\r\n                        draggable={true}\r\n                        onPositionChanged= {onScriptLoad} \r\n\r\n                        onClick={()=>{\r\n                            onScriptLoad()\r\n                        }}\r\n                        \r\n                        icon={{\r\n                            url: `/user.svg`,\r\n                            origin: new window.google.maps.Point(0, 0),\r\n                            anchor: new window.google.maps.Point(15, 15),\r\n                            scaledSize: new window.google.maps.Size(35, 35),\r\n                        }}\r\n                    ></Marker> :\r\n                    null\r\n                }\r\n\r\n                {data.map((d) => (\r\n                    <Marker\r\n                        key={d.place_id}\r\n                        position={{\r\n                            lat : d.geometry.location.lat(), \r\n                            lng : d.geometry.location.lng()\r\n                        }}\r\n                        onClick={()=>{\r\n                            setSelected(d)\r\n                        }}\r\n\r\n                        icon={{\r\n                            url: `/shop.svg`,\r\n                            origin: new window.google.maps.Point(0, 0),\r\n                            anchor: new window.google.maps.Point(15, 15),\r\n                            scaledSize: new window.google.maps.Size(30, 30), \r\n                        }}     \r\n                    />\r\n                ))}\r\n\r\n                {selected && (\r\n                    <InfoWindow\r\n                        position={{\r\n                            lat : selected.geometry.location.lat(), \r\n                            lng : selected.geometry.location.lng()\r\n                        }}\r\n                        onCloseClick={()=>{\r\n                            setSelected(null)\r\n                        }}\r\n                    >\r\n                        <div>\r\n                            <h2>{selected.name}</h2>\r\n                            <p>Location : {selected.vicinity}</p>\r\n                            <p>Total Ratings : <strong>{selected.user_ratings_total}</strong></p>\r\n                        </div>\r\n                    </InfoWindow>\r\n                )} \r\n\r\n            </GoogleMap>\r\n            <div id='map'></div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Backup","import React, { useEffect, forwardRef, useImperativeHandle, useContext } from \"react\";\r\n// import {firebaseAuth} from '.../Provider/AuthProvider'\r\nimport Sidebar from '../Sidebar/sidebar'\r\nimport Backup from '../Map/backup'\r\nimport './main.css'\r\n\r\nconst Main = forwardRef(({option}, ref)=> {\r\n\r\n    // Location state, defaults to Kireka\r\n    const [location, setLocation] = React.useState(\r\n        {\r\n             lat: 0, \r\n             lng: 0\r\n        })\r\n    const [opt, setOpt] = React.useState(option)\r\n    const [stores, setStores] = React.useState(()=>[])\r\n\r\n    // // Destructure Sign out\r\n    // const {signout,} = useContext(firebaseAuth)\r\n    \r\n\r\n    useEffect(() => {\r\n        setOpt(option)\r\n    }, [option])\r\n\r\n    // const types_of_stores = ['hardware_store', 'electronics_store', 'furniture_store', 'plumber',\r\n    //         'painter', 'roofings_contractor'\r\n    //         ]\r\n    \r\n    // Get User Location\r\n    if (navigator.geolocation){\r\n            navigator.geolocation.getCurrentPosition((position)=>{ // watchPosition | getCurrentPosition\r\n                setLocation({\r\n                    lat: position.coords.latitude,\r\n                    lng: position.coords.longitude\r\n                })\r\n            })\r\n        }\r\n    else{\r\n            alert('Browser doesn\\'t support Geolocation, such browsers last existed in the 20th century')\r\n        }\r\n\r\n    // Handle change location\r\n    const handleChangeLocation = newLocation => setLocation(newLocation)\r\n\r\n    // Callback to return the stores\r\n    const onScriptLoad = () => { \r\n        let request = {\r\n            location: location,\r\n            // radius : 1 * 1000, // delete if you are using \"rankBy : DISTANCE\"\r\n            rankBy : window.google.maps.places.RankBy.DISTANCE,\r\n            types: [opt.value],\r\n        };\r\n\r\n        let data = [];\r\n\r\n        var service = new window.google.maps.places.PlacesService(document.getElementById('map'))\r\n        service.nearbySearch(request, function(results, status) {\r\n            if (status === window.google.maps.places.PlacesServiceStatus.OK) {\r\n        \r\n                for (var i = 0; i < results.length; i++) {\r\n                    data.push(results[i])  \r\n                }\r\n                setStores(data)\r\n            }\r\n             \r\n        })\r\n    }\r\n\r\n\r\n    // Imperative Handle : Moves state up to App.js\r\n    useImperativeHandle(ref, () => {\r\n        return {\r\n        onScriptLoad : onScriptLoad\r\n        };\r\n    });\r\n\r\n    return(\r\n        <div className='main'>\r\n            <div className='map-area'>\r\n               <Backup onScriptLoad={onScriptLoad} data={stores} loc={location} changeLocation={handleChangeLocation}/> \r\n            </div>\r\n            <div className='sidebar-area'>\r\n                <Sidebar data={stores} />\r\n            </div>\r\n            \r\n        </div>\r\n    )\r\n})\r\n\r\nexport default Main","import React, {useContext} from 'react'\r\n// import {firebaseAuth} from '.../Provider/AuthProvider'\r\nimport Select from 'react-select'\r\nimport './navbar.css'\r\n\r\nconst Navbar = ({option, handleChange}) => {\r\n\r\n    const options = [\r\n        { value: 'hardware_store', label: 'Hardware Shops' },\r\n        { value: 'electronics_store', label: 'Electronics' },\r\n        { value: 'furniture_store', label: 'Furniture Shops' },\r\n        { value: 'plumber', label: 'Plumber' },\r\n        { value: 'painter', label: 'Painter' },\r\n        { value: 'roofing_contractor', label: 'Roofing Contractor' },\r\n      ]; \r\n\r\n     // Destructure Sign out\r\n    // const {signout,} = useContext(firebaseAuth)\r\n      \r\n\r\n    return(\r\n        <div className='navbar'>\r\n            <div className=\"header\">\r\n                <h4 className='logo'>constiFinder </h4>\r\n                <Select className='dd-wrapper'\r\n                    value={option}\r\n                    onChange={handleChange}\r\n                    options={options}\r\n                />\r\n                <nav>\r\n                    <ul className='nav_links'>\r\n                        <li><a href='/'>Help</a></li>\r\n                        <li><a href='/'>Logout</a></li>\r\n                    </ul>\r\n                </nav>\r\n                {/* <a href='/'><button>User</button></a> */}\r\n            </div>\r\n        </div>\r\n     )\r\n    console.log(option)\r\n}\r\nexport default Navbar","import React, {useState, useContext} from 'react';\n// import {firebaseAuth} from '.../Provider/AuthProvider'\n// import SignIn from \"../User/signin\";\n// import {Route, Switch} from 'react-router-dom'\n// import Signup from '../User/signup'\nimport './App.css';\n// import Map from '../Map/map'\nimport Main from '../Main/main'\nimport Navbar from '../Navbar/navbar'\nimport onScriptLoad1 from '../Main/main'\n\nexport default function App() {\n\n  const [selectedStore, setSelectedStore] = useState({value: 'hardware_store', \n        label: 'Hardware Shops'});\n        \n  // const ref = useRef(null);\n  // const handleRef = () => ref.current.onScriptLoad\n        \n  // Change selected option    \n  const handleChange = (selectedOption) => {\n    setSelectedStore(selectedOption)\n  }\n  \n  // // Destructure token from Context\n  // const { token } = useContext(firebaseAuth)\n  // console.log(token)\n\n  // const {handleSignup} = useContext(firebaseAuth)\n  //   console.log(handleSignup)\n  \n  return (\n        \n      <div className=\"App\">\n        <div className='nav'><Navbar option={selectedStore} handleChange={handleChange} load={onScriptLoad1}/></div>\n        <div className='main'><Main option={selectedStore}/></div>\n      </div>\n  );\n}\n\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './components/App/App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n    <App />,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}